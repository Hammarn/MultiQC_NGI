#!/usr/bin/env python

""" MultiQC submodule to parse output from edgeR log2 CPM distance
heatmap data generated by the NGI-RNAseq best practice analysis pipeline
https://github.com/SciLifeLab/NGI-RNAseq/ """

import logging

from multiqc.plots import heatmap

# Initialise the logger
log = logging.getLogger('multiqc.modules.ngi_rnaseq')


def parse_reports(self):
    """ Find bamtools stats reports and parse their data """

    # Set up vars
    self.heatmap_data = dict()

    # Go through files and parse data using regexes
    found_heatmap = False
    for f in self.find_log_files('ngi_rnaseq/heatmap'):
        # Parse the file
        xcats = None
        ycats = []
        data = []
        for l in f['f'].splitlines():
            s = l.split()
            if xcats is None:
                xcats = s
            else:
                ycats.append(s[0])
                data.append([float(x) for x in s[1:]])
        # Should only have one heat map per report
        if found_heatmap:
            log.debug("Duplicate sample name found! Overwriting: {}".format(f['s_name']))
        found_heatmap = True
        self.add_data_source(f, section='heatmap')

    if found_heatmap:
        pconfig = {
            'title': 'Sample Distances',
            'reverseColors': True
        }
        self.add_section(
            name = 'Sample Similarity',
            anchor = 'ngi_rnaseq-sample_similarity',
            description = '''To generate this plot, gene counts are normalised using
                <a href="https://bioconductor.org/packages/release/bioc/html/edgeR.html" target="_blank">edgeR</a>.
                Euclidean distances between log<sub>2</sub> normalised CPM values are then calculated and clustered.''',
            plot = heatmap.plot(data, xcats, ycats, pconfig)
        )

    # Return number of samples found
    return 1 if found_heatmap else 0

